definitions:
  # the names of the functions - we use this to generate the code and to register the functions in
  # the javascript class
  ifunction: "ruby_${generator.prefix}_${class_name}_${func_name.replace('+', '_plus').replace('-', '_minus').replace('*', '_multiply').replace('/', '_divide').replace('=', '_eq').replace('<', '_lt').replace('>', '_gt').replace('!', '_not')}"
  sfunction: "ruby_${generator.prefix}_${class_name}_${func_name}"
  constructor: "ruby_${generator.prefix}_${class_name}_constructor"
conversions:
  # some times you want to use a special native type when converting from spidermonkey to native
  # the most common case would be from JS-boolean to bool. Using "bool" will fail here since we
  # pass the address to the conversion method, and a JSBool is defined as an integer in spidermonkey
  native_types:
    float: "double"
    short: "int32_t"
    "unsigned char": "uint16_t"
    "char": "int32_t"
    "@std::vector<std::basic_string.*>.>.>": "std::vector<std::string>"
    "@std::vector<int.*>.>": "std::vector<int>"
    "@cocos2d::Map<std::(basic_string<char>|string),": "cocos2d::Map<std::string,"
    "@, std::allocator<[^>]*> ": ""
  ns_map:
    "cocos2d::experimental::ui::": "CCExp::"
    "cocos2d::experimental::": "CCExp::"
    "cocos2d::extension::": "CC::"
    "cocos2d::ui::": "CCUI::"
    "cocos2d::": "CC::"
    "spine::": "SP::"
    "cocostudio::timeline::": "CCS::"
    "cocostudio::": "CCS::"
    "cocosbuilder::": "CC::"
    "CocosDenshion::": "CC::"

  to_native:
    # ruby to native
    int: "ok = rubyval_to_int32(mrb, ${in_value}, (int*)&${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "unsigned int": "ok = rubyval_to_uint32(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "unsigned char": "ok = rubyval_to_uint16(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    short: "ok = rubyval_to_int32(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "unsigned short": "ok = rubyval_to_ushort(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    char: "ok = rubyval_to_int32(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    bool: "ok = rubyval_to_boolean(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    float: "ok = rubyval_to_number(mrb, ${in_value}, (double*)&${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    double: "ok = rubyval_to_number(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    long: "ok = rubyval_to_long(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    ssize_t: "ok = rubyval_to_ssize(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "unsigned long": "ok = rubyval_to_ulong(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "long long": "ok = rubyval_to_long_long(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "std::string": "ok = rubyval_to_std_string(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "String*": "std::string ${out_value}_tmp; ok = rubyval_to_std_string(mrb, ${in_value}, &${out_value}_tmp, \"${ruby_namespaced_class_name}:${func_name}\"); ${out_value} = cocos2d::String::create(${out_value}_tmp)"
    "char*": "std::string ${out_value}_tmp; ok = rubyval_to_std_string(mrb, ${in_value}, &${out_value}_tmp, \"${ruby_namespaced_class_name}:${func_name}\"); ${out_value} = ${out_value}_tmp.c_str()"

    "Array*": "ok = rubyval_to_array(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "Dictionary*": "ok = rubyval_to_dictionary(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "@Vector<.*>": "ok = rubyval_to_ccvector(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "@Map<std::basic_string.*>": "ok = rubyval_to_ccmap_string_key(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "Value": "ok = rubyval_to_ccvalue(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "ValueMap": "ok = rubyval_to_ccvaluemap(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "ValueMapIntKey": "ok = rubyval_to_ccvaluemapintkey(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "ValueVector": "ok = rubyval_to_ccvaluevector(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "@vector<std::basic_string.*>": "ok = rubyval_to_std_vector_string(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "@vector<int.*>": "ok = rubyval_to_std_vector_int(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "@vector<float.*>": "ok = rubyval_to_std_vector_float(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "@vector<unsigned short.*>": "ok = rubyval_to_std_vector_ushort(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
    "@vector<.*>": "ok = rubyval_to_std_vector_object(mrb, ${in_value}, &${out_value}, \"${scriptname}\", \"${ruby_namespaced_class_name}.${func_name}\")"
    "@vector<.*>\\*": "${arg.get_whole_param_name($generator)[:-1]} ${out_value}_tmp; ok = rubyval_to_std_vector_object(mrb, ${in_value}, &${out_value}_tmp, \"${scriptname}\", \"${ruby_namespaced_class_name}.${func_name}\"); ${out_value} = &${out_value}_tmp"

#    "Point": "ok = rubyval_to_point(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
#    "Vec2": "ok = rubyval_to_object<Vec2>(mrb, ${in_value}, \"${scriptname}\",&${out_value})"
#    "Vec3": "ok = rubyval_to_vec3(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
#    "Vec4": "ok = rubyval_to_vec4(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
#    "Rect": "ok = rubyval_to_rect(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
#    "Size": "ok = rubyval_to_size(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
#    "Color4B": "ok =rubyval_to_color4b(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
#    "Color4F": "ok =rubyval_to_color4f(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
#    "Color3B": "ok = rubyval_to_color3b(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
#    "PhysicsMaterial": "ok = rubyval_to_physics_material(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
#    "AffineTransform": "ok = rubyval_to_affinetransform(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
#    "FontDefinition":  "ok = rubyval_to_fontdefinition(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
#    "kmMat4": "ok = rubyval_to_kmMat4(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
#    "Mat4": "ok = rubyval_to_mat4(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
#    "_ttfConfig": "ok = rubyval_to_ttfconfig(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"
#    "MeshVertexAttrib": "ok = rubyval_to_mesh_vertex_attrib(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"

    "float*": "ok = rubyval_to_carray_float(mrb, ${in_value}, &${out_value}, \"${ruby_namespaced_class_name}.${func_name}\")"

    object: "ok = rubyval_to_object<${arg.get_whole_param_name($generator).replace('*', '')}>(mrb, ${in_value}, \"${scriptname}\", &${out_value})"

  from_native:
    # native to ruby
    int: "${out_value} = mrb_fixnum_value((mrb_int)${in_value})"
    "unsigned int": "${out_value} = mrb_fixnum_value((mrb_int)${in_value})"
    "unsigned short": "${out_value} = mrb_fixnum_value((mrb_int)${in_value})"
    "unsigned char": "${out_value} = mrb_fixnum_value((mrb_int)${in_value})"
    short: "${out_value} = mrb_fixnum_value((mrb_int)${in_value})"
    char: "${out_value} = mrb_fixnum_value((mrb_int)${in_value})"
    "long long": "${out_value} = mrb_fixnum_value((mrb_int)${in_value})"
    "std::string": "${out_value} = mrb_str_new_cstr(mrb, ${in_value}.c_str())"
    "basic_string<char>": "${out_value} = mrb_str_new_cstr(mrb, ${in_value}.c_str())"
    "char*": "${out_value} = mrb_str_new_cstr(mrb, (const char*)${in_value})"
    "String*": "${out_value} = mrb_str_new_cstr(mrb, ${in_value}->getCString())"
    bool: "${out_value} = mrb_bool_value((mrb_bool)${in_value})"
    float: "${out_value} = mrb_float_value(mrb, (mrb_float)${in_value})"
    double: "${out_value} = mrb_float_value(mrb, (mrb_float)${in_value})"
    long: "${out_value} = mrb_fixnum_value((mrb_int)${in_value})"
    ssize_t: "${out_value} = mrb_fixnum_value((mrb_int)${in_value})"
    "unsigned long": "${out_value} = mrb_fixnum_value((mrb_int)${in_value})"

    "Array*": "${out_value} = array_to_rubyval(mrb, ${in_value})"
    "Dictionary*": "${out_value} = dictionary_to_rubyval(mrb, ${in_value})"
    "@Vector<.*>": "${out_value} = ccvector_to_rubyval(mrb, ${in_value})"
    "@Map<std::basic_string.*>": "${out_value} = ccmap_string_key_to_rubyval(mrb, ${in_value})"
    "Value": "${out_value} = ccvalue_to_rubyval(mrb, ${in_value})"
    "ValueMap": "${out_value} = ccvaluemap_to_rubyval(mrb, ${in_value})"
    "ValueMapIntKey": "${out_value} = ccvaluemapintkey_to_rubyval(mrb, ${in_value})"
    "ValueVector": "${out_value} = ccvaluevector_to_rubyval(mrb, ${in_value})"
    "@vector<std::basic_string.*>": "${out_value} = std_vector_std_string_to_rubyval(mrb, ${in_value})"
    "@vector<int.*>": "${out_value} = std_vector_int_to_rubyval(mrb, ${in_value})"
    "@vector<float.*>": "${out_value} = std_vector_float_to_rubyval(mrb, ${in_value})"
    "@vector<unsigned short.*>": "${out_value} = std_vector_ushort_to_rubyval(mrb, ${in_value})"
    "@vector<.*>": "${out_value} = std_vector_object_to_rubyval(mrb, ${in_value}, \"${scriptname}\")"
    "@vector<.*>\\*": "${out_value} = std_vector_object_to_rubyval(mrb, *${in_value}, \"${scriptname}\")"

#    "Point": "point_to_rubyval(mrb, ${in_value})"
#    "Vec2": "vec2_to_rubyval(mrb, ${in_value})"
#    "Vec3": "vec3_to_rubyval(mrb, ${in_value})"
#    "Vec4": "vec4_to_rubyval(mrb, ${in_value})"
#    "Rect": "rect_to_rubyval(mrb, ${in_value})"
#    "Size": "size_to_rubyval(mrb, ${in_value})"
#    "Color4B": "color4b_to_rubyval(mrb, ${in_value})"
#    "Color4F": "color4f_to_rubyval(mrb, ${in_value})"
#    "Color3B": "color3b_to_rubyval(mrb, ${in_value})"
#    "PhysicsMaterial": "physics_material_to_rubyval(mrb, ${in_value})"
#    "PhysicsContactData*": "physics_contactdata_to_rubyval(mrb, ${in_value})"
#    "PhysicsRayCastInfo": "physics_raycastinfo_to_rubyval(mrb, ${in_value})"
#    "AffineTransform": "affinetransform_to_rubyval(mrb, ${in_value})"
#    "FontDefinition": "fontdefinition_to_rubyval(mrb, ${in_value})"
#    "Mat4": "mat4_to_rubyval(mrb, ${in_value})"
#    "BlendFunc": "blendfunc_to_rubyval(mrb, ${in_value})"
#    "_ttfConfig": "ttfconfig_to_rubyval(mrb, ${in_value})"
#    "MeshVertexAttrib": "mesh_vertex_attrib_to_rubyval(mrb, ${in_value})"

    object: "${out_value} = object_to_rubyval<${ntype.replace('*', '')}>(mrb, \"${scriptname}\", (${ntype.replace('*', '')}*)${in_value}, ${ruby_class})"
